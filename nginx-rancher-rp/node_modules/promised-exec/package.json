{
  "name": "promised-exec",
  "version": "1.0.1",
  "description": "Promised execution of terminal command.",
  "main": "index.js",
  "scripts": {
    "test": "gulp test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/yakimchuk/promised-exec.git"
  },
  "keywords": [
    "promise",
    "nodejs",
    "exec",
    "terminal",
    "deferred",
    "command",
    "cmd"
  ],
  "author": {
    "name": "Roman Yakimchuk"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/yakimchuk/promised-exec/issues"
  },
  "homepage": "https://github.com/yakimchuk/promised-exec",
  "devDependencies": {
    "gulp": "^3.8.10",
    "gulp-jasmine": "^1.0.1"
  },
  "dependencies": {
    "q": "^1.1.2"
  },
  "readme": "<p align=\"center\">\n  <a href=\"https://github.com/yakimchuk/promised-exec\">\n    <img height=\"214\" width=\"214\" src=\"http://upload.wikimedia.org/wikipedia/commons/6/6a/JavaScript-logo.png\"/>\n  </a>\n</p>\n\n# [promised-exec](https://github.com/yakimchuk-me/promised-exec) #\n>  Promised version of NodeJS child_process exec.\n\n## How to install this module?\nTo install this module use following command at root path of your module:\n``` bash\nnpm install promised-exec --save\n```\n\n## Usage\nThis module exports function which waits only one argument on input: string with terminal command.\n\nFunction returns promise (based on library \"q\").\n\nIf command is invalid, the `catch` function will be called with object which contains string with error, and default error buffer (argument error of exec callback).\n\nIf command is valid, but response of command is error, the `catch` function will be called with object which contains string with error, and default error buffer (argument error of exec callback).\n\nIf command is valid, and response is correct, the `the` function will be called with string which contains response of command.\n\n**Example (correct command):**\n\n``` javascript\n\nvar exec, promise;\n\nexec = require('promised-exec');\n\npromise = exec('ls -l');\n\npromise.then(function (responseString) {\n\n    /*\n     * Now variable 'responseString' contains string:\n     *\n     *  \"-rwxrwxrwx 1 root root   29 дек  6 09:58 config.json\n     *   -rwxrwxrwx 1 root root  142 дек  6 09:58 gulpfile.js\n     *   -rwxrwxrwx 1 root root  224 дек  6 09:58 gulptask.test.js\n     *   -rwxrwxrwx 1 root root  796 дек  6 10:34 index.js\n     *   -rwxrwxrwx 1 root root 1093 дек  6 09:58 LICENSE\n     *   drwxrwxrwx 1 root root    0 дек  6 09:59 node_modules\n     *   -rwxrwxrwx 1 root root  713 дек  6 09:58 package.json\n     *   -rwxrwxrwx 1 root root 3051 дек  6 10:51 README.md\n     *   drwxrwxrwx 1 root root    0 дек  6 10:35 tests\"\n     *\n     */\n\n});\n\n. . .\n\n```\n\n**Example (incorrect command):**\n\n``` javascript\n\nvar exec, promise;\n\nexec = require('promised-exec');\n\npromise = exec('some-unknown-command');\n\npromise.catch(function (errorObject) {\n\n    /*\n     * Now variable 'errorObject' contains object:\n     *\n     *   {\"buffer\": <Buffer>,\"string\":\"Error: Command failed: /bin/sh: some-unknown-command: command not found\\n\"}\n     *\n     */\n\n});\n\n. . .\n\n```\n\n**Example (incorrect command arguments):**\n\n``` javascript\n\nvar exec, promise;\n\nexec = require('promised-exec');\n\npromise = exec('ls -w');\n\npromise.catch(function (errorObject) {\n\n    /*\n     * Now variable 'errorObject' contains object:\n     *\n     *   {\"buffer\": <Buffer>,\"string\":\"Error: Command failed: ls: key must be used with argument \\\"w\\\"\\nUse command \\\"ls --help\\\" to get additional information.\\n\"}\n     *\n     */\n\n});\n\n. . .\n\n```",
  "readmeFilename": "README.md",
  "_id": "promised-exec@1.0.1",
  "dist": {
    "shasum": "af841cc4c0341997f4367b426d0d25a4accc723a"
  },
  "_from": "promised-exec@",
  "_resolved": "https://registry.npmjs.org/promised-exec/-/promised-exec-1.0.1.tgz"
}
